@page "/reset-password"
@attribute [AllowAnonymous]
@inject HttpClient Http
@inject NavigationManager Nav
@using System.Web

<HeadContent>
    <!-- Queste regole globali vanno messe una sola volta in _Host.cshtml o index.html -->
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: #121212;
            font-family: 'Montserrat', sans-serif;
        }
    </style>
</HeadContent>

<a href="/" class="back-button" title="Torna alla Home">
  <i class="fas fa-arrow-left"></i>
</a>

<div class="login-container">
  <div class="login-card">

    <div class="login-brand">
      <img src="/Images/Logging/LogoHome.png" alt="Officina Meccanica Milani" class="login-logo" />
      <span class="brand-title">
                Officina<br />Meccanica<br /> Milani
      </span>
    </div>

    <h2>RESET PASSWORD</h2>

    @if (string.IsNullOrEmpty(token))
    {
      <p class="error-text">Token mancante.</p>
    }
    else if (success)
    {
      <p class="error-text ok-text">
        Password aggiornata! 
        <a href="/login" class="register-link">Vai al login</a>
      </p>
    }
    else
    {
      <EditForm Model="model" OnValidSubmit="DoReset" class="login-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input @bind="model.NewPassword"
               type="password"
               placeholder="Nuova password"
               class="input-field"
               required />

        <input @bind="model.ConfirmPassword"
               type="password"
               placeholder="Conferma password"
               class="input-field"
               required />

        <button type="submit" class="btn-login">Resetta password</button>
      </EditForm>
    }

  </div>
</div>

@code {
  string? token;
  ResetModel model = new();
  bool success = false;

  protected override void OnInitialized()
  {
    var uri = Nav.ToAbsoluteUri(Nav.Uri);
    var qs = HttpUtility.ParseQueryString(uri.Query);
    token = qs["token"];
  }

  async Task DoReset()
  {
    if (model.NewPassword != model.ConfirmPassword)
      return; // qui potresti anche segnalare l’errore
    var dto = new { Token = token, NewPassword = model.NewPassword };
    var resp = await Http.PostAsJsonAsync("api/auth/reset-password", dto);
    if (resp.IsSuccessStatusCode)
      success = true;
  }

  class ResetModel
  {
    public string NewPassword { get; set; } = "";
    public string ConfirmPassword { get; set; } = "";
  }
}
