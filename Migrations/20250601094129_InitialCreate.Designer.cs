// <auto-generated />
using System;
using BlazorOfficina.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorOfficina.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250601094129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlazorOfficina.Data.Models.Appuntamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostoStimato")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeccanicoId")
                        .HasColumnType("int");

                    b.Property<int>("ModalitaConsegna")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreferenzeContatto")
                        .HasColumnType("int");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int>("VeicoloId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeccanicoId");

                    b.HasIndex("ServizioId");

                    b.HasIndex("UtenteId");

                    b.HasIndex("VeicoloId");

                    b.ToTable("Appuntamenti");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Preventivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("MeccanicoId")
                        .HasColumnType("int");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Totale")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int>("VeicoloId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeccanicoId");

                    b.HasIndex("ServizioId");

                    b.HasIndex("UtenteId");

                    b.HasIndex("VeicoloId");

                    b.ToTable("Preventivi");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Ricambio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Prezzo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Ricambi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "FR123",
                            Nome = "Pastiglie freni anteriori",
                            Prezzo = 45m
                        },
                        new
                        {
                            Id = 2,
                            Codice = "FO456",
                            Nome = "Filtro olio",
                            Prezzo = 15m
                        },
                        new
                        {
                            Id = 3,
                            Codice = "BT789",
                            Nome = "Batteria 12V 60Ah",
                            Prezzo = 90m
                        },
                        new
                        {
                            Id = 4,
                            Codice = "PN012",
                            Nome = "Pneumatico 195/65 R15",
                            Prezzo = 75m
                        },
                        new
                        {
                            Id = 5,
                            Codice = "KD345",
                            Nome = "Kit distribuzione",
                            Prezzo = 120m
                        },
                        new
                        {
                            Id = 6,
                            Codice = "LP678",
                            Nome = "Lampadina faretto",
                            Prezzo = 8m
                        });
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Riparazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Chilometraggio")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataProntoRitiro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeccanicoId")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int>("VeicoloId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeccanicoId");

                    b.HasIndex("UtenteId");

                    b.HasIndex("VeicoloId");

                    b.ToTable("Riparazioni");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Servizio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurataMassimi")
                        .HasColumnType("int");

                    b.Property<int>("DurataMinuti")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrezzoBase")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servizi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "",
                            DurataMassimi = 90,
                            DurataMinuti = 60,
                            Nome = "Tagliando",
                            PrezzoBase = 100m
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "",
                            DurataMassimi = 105,
                            DurataMinuti = 75,
                            Nome = "Revisione",
                            PrezzoBase = 150m
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "",
                            DurataMassimi = 120,
                            DurataMinuti = 90,
                            Nome = "Riparazione",
                            PrezzoBase = 200m
                        },
                        new
                        {
                            Id = 4,
                            Descrizione = "Tagliando + controlli extra",
                            DurataMassimi = 110,
                            DurataMinuti = 80,
                            Nome = "Tagliando Completo",
                            PrezzoBase = 180m
                        },
                        new
                        {
                            Id = 5,
                            Descrizione = "Pastiglie + lavoro montaggio",
                            DurataMassimi = 90,
                            DurataMinuti = 60,
                            Nome = "Sostituzione freni",
                            PrezzoBase = 250m
                        },
                        new
                        {
                            Id = 6,
                            Descrizione = "Lettura codici errore ECU",
                            DurataMassimi = 45,
                            DurataMinuti = 30,
                            Nome = "Diagnostica computerizzata",
                            PrezzoBase = 80m
                        });
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Veicolo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Anno")
                        .HasColumnType("int");

                    b.Property<string>("Carburante")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<bool>("ChiaviDiRiserva")
                        .HasColumnType("bit");

                    b.Property<int>("Chilometraggio")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataPrevisto")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterventoCorrente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LibrettoCircolazione")
                        .HasColumnType("bit");

                    b.Property<bool>("ManualeUso")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modello")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PercentualeRiparazione")
                        .HasColumnType("int");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<string>("Targa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtenteId");

                    b.ToTable("Veicoli");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Appuntamento", b =>
                {
                    b.HasOne("BlazorOfficina.Data.Models.User", "Meccanico")
                        .WithMany()
                        .HasForeignKey("MeccanicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.Servizio", "Servizio")
                        .WithMany()
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.User", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.Veicolo", "Veicolo")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("VeicoloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meccanico");

                    b.Navigation("Servizio");

                    b.Navigation("Utente");

                    b.Navigation("Veicolo");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Preventivo", b =>
                {
                    b.HasOne("BlazorOfficina.Data.Models.User", "Meccanico")
                        .WithMany()
                        .HasForeignKey("MeccanicoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorOfficina.Data.Models.Servizio", "Servizio")
                        .WithMany()
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.User", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.Veicolo", "Veicolo")
                        .WithMany()
                        .HasForeignKey("VeicoloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meccanico");

                    b.Navigation("Servizio");

                    b.Navigation("Utente");

                    b.Navigation("Veicolo");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Riparazione", b =>
                {
                    b.HasOne("BlazorOfficina.Data.Models.User", "Meccanico")
                        .WithMany()
                        .HasForeignKey("MeccanicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.User", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorOfficina.Data.Models.Veicolo", "Veicolo")
                        .WithMany("Riparazioni")
                        .HasForeignKey("VeicoloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meccanico");

                    b.Navigation("Utente");

                    b.Navigation("Veicolo");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Veicolo", b =>
                {
                    b.HasOne("BlazorOfficina.Data.Models.User", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("BlazorOfficina.Data.Models.Veicolo", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Riparazioni");
                });
#pragma warning restore 612, 618
        }
    }
}
